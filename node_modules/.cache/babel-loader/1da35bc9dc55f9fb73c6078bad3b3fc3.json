{"ast":null,"code":"var _jsxFileName = \"/Users/saicharanchinna/Documents/Arty-Crafty-UI/src/screens/auth/register/RegisterScreen.tsx\",\n    _s3 = $RefreshSig$();\n\nimport \"./RegisterScreen.scss\";\nimport * as Yup from \"yup\";\nimport \"yup-phone\";\nimport { Field, Form, Formik } from 'formik';\nimport FormikInputComponent from \"../../../shared/components/core/formik-input/FormikInputComponent\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport FormikDatePickerComponent from \"../../../shared/components/core/formik-date-picker/FormikDatePickerComponent\";\nimport FormikPhoneInputComponent from \"../../../shared/components/core/formik-phone-input/FormikPhoneInputComponent\";\nimport ButtonComponent from \"../../../shared/components/core/button/ButtonComponent\";\nimport { CommonService } from \"../../../shared/services\";\nimport FormikSelectDropdownComponent from \"../../../shared/components/core/formik-select-dropdown/FormikSelectDropdownComponent\";\nimport { APIConfig, ImageConfig } from \"../../../constants\";\nimport { useDispatch } from \"react-redux\";\nimport { setIsUserFromRegisterScreen, setLoggedInUserData, setLoggedInUserToken } from \"../../../store/actions/account.action\";\nimport { useNavigate } from \"react-router-dom\";\nimport FormLayoutComponent from \"../../../layouts/form-layout/FormLayout\";\nimport { Col, Row, Visible } from \"react-grid-system\";\nimport LabelComponent from \"../../../shared/components/core/label/LabelComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst basicFormValidation = Yup.object({\n  firstName: Yup.string().required(\"Required\").matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for this field \").max(100, 'First name maximum limit should be 100 characters'),\n  middleName: Yup.string().matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for this field \").max(100, 'Middle name maximum limit should be 100 characters'),\n  lastName: Yup.string().required(\"Required\").matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for this field \").max(100, 'Last name maximum limit should be 100 characters'),\n  dateOfBirth: Yup.string().required(\"Required\").nullable(),\n  emailId: Yup.string().email(\"Enter a valid email\").required(\"Required\"),\n  phoneNumber: Yup.string().required('Required').matches(/^(\\([0-9]{3}\\) |[0-9]{3}-)[0-9]{3}-[0-9]{4}$/, 'Invalid phone number')\n});\nconst advancedFormValidation = Yup.object({\n  gender: Yup.mixed().required(\"Required\"),\n  weight: Yup.number().max(1400, 'Max weight can be 1400 lbs').required(\"Required\"),\n  zipcode: Yup.mixed().required(\"Required\"),\n  state: Yup.mixed().required(\"Required\"),\n  city: Yup.mixed().required(\"Required\"),\n  newZipCode: Yup.string().when('zipcode', {\n    is: zipcode => {\n      var _zipcode$zipcode;\n\n      return (zipcode === null || zipcode === void 0 ? void 0 : zipcode.zipcode) && (zipcode === null || zipcode === void 0 ? void 0 : (_zipcode$zipcode = zipcode.zipcode) === null || _zipcode$zipcode === void 0 ? void 0 : _zipcode$zipcode.toLowerCase()) === \"other\";\n    },\n    then: Yup.string().required('Required')\n  })\n});\nconst BasicFormInitialValues = {\n  firstName: \"\",\n  middleName: \"\",\n  lastName: \"\",\n  dateOfBirth: \"\",\n  emailId: \"\",\n  phoneNumber: \"\"\n};\nconst AdvancedFormInitialValues = {\n  gender: \"\",\n  heightInInches: '',\n  heightInFeet: '',\n  weight: '',\n  zipcode: \"\",\n  state: \"\",\n  city: \"\"\n};\n\nconst RegisterScreen = props => {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [state, setState] = useState(\"\");\n  const [isZipCodeNotFound, setIsZipCodeNotFound] = useState(false);\n  const [basicDetails, setBasicDetails] = useState();\n  const [formType, setFormType] = useState('basic');\n  const [basicFormInitialValues, setBasicFormInitialValues] = useState(BasicFormInitialValues);\n  const [advancedFormInitialValues] = useState(AdvancedFormInitialValues);\n  const basicFormRef = useRef(null);\n  const onBasicFormSubmit = useCallback((values, _ref) => {\n    let {\n      setSubmitting,\n      setErrors\n    } = _ref;\n    const payload = { ...values\n    };\n    setBasicDetails(payload);\n    setFormType('advanced');\n  }, []);\n  const onAdvancedFormSubmit = useCallback((values, _ref2) => {\n    var _payload$gender, _payload$heightInFeet, _payload$heightInInch;\n\n    let {\n      setSubmitting,\n      setErrors\n    } = _ref2;\n    const payload = { ...values,\n      ...basicDetails\n    };\n    payload['dateOfBirth'] = CommonService.convertDateFormat(payload['dateOfBirth'], 'YYYY-MM-DD');\n    const phoneNumber = payload['phoneNumber'].replace(/[^0-9a-zA-Z. ]/g, '');\n    payload['phoneNumber'] = phoneNumber.replaceAll(' ', '');\n    payload[\"gender\"] = payload === null || payload === void 0 ? void 0 : (_payload$gender = payload.gender) === null || _payload$gender === void 0 ? void 0 : _payload$gender.code;\n    payload[\"heightInFeet\"] = payload === null || payload === void 0 ? void 0 : (_payload$heightInFeet = payload.heightInFeet) === null || _payload$heightInFeet === void 0 ? void 0 : _payload$heightInFeet.code;\n    payload[\"heightInInches\"] = payload === null || payload === void 0 ? void 0 : (_payload$heightInInch = payload.heightInInches) === null || _payload$heightInInch === void 0 ? void 0 : _payload$heightInInch.code;\n\n    if (payload[\"newZipCode\"]) {\n      var _payload$state, _payload$city;\n\n      payload[\"zipcode\"] = payload[\"newZipCode\"];\n      payload[\"state\"] = payload === null || payload === void 0 ? void 0 : (_payload$state = payload.state) === null || _payload$state === void 0 ? void 0 : _payload$state.state;\n      payload[\"city\"] = payload === null || payload === void 0 ? void 0 : (_payload$city = payload.city) === null || _payload$city === void 0 ? void 0 : _payload$city.city;\n      delete payload[\"newZipCode\"];\n    } else {\n      var _payload$zipcode;\n\n      payload[\"zipcode\"] = payload === null || payload === void 0 ? void 0 : (_payload$zipcode = payload.zipcode) === null || _payload$zipcode === void 0 ? void 0 : _payload$zipcode.zipcode;\n    }\n\n    setSubmitting(true);\n\n    CommonService._user.registerPatient(payload).then(response => {\n      CommonService._alert.showToast((response === null || response === void 0 ? void 0 : response.message) || \"Patient has been Registered\", \"success\");\n\n      dispatch(setLoggedInUserData(response.data));\n      dispatch(setLoggedInUserToken(response.data.token));\n      dispatch(setIsUserFromRegisterScreen(true));\n      setSubmitting(false);\n      navigate(CommonService._routeConfig.IntakeFormRoute());\n    }).catch(error => {\n      CommonService.handleErrors(setErrors, error);\n      setSubmitting(false);\n    });\n  }, [basicDetails, dispatch, navigate]);\n  const handleZipCodeValueChange = useCallback((zipCodeObject, setFieldValue) => {\n    var _zipCodeObject$zipcod;\n\n    if ((zipCodeObject === null || zipCodeObject === void 0 ? void 0 : (_zipCodeObject$zipcod = zipCodeObject.zipcode) === null || _zipCodeObject$zipcod === void 0 ? void 0 : _zipCodeObject$zipcod.toLowerCase()) === \"other\") {\n      setIsZipCodeNotFound(true);\n      setFieldValue(\"state\", \"\");\n      setFieldValue(\"city\", \"\");\n    } else {\n      setIsZipCodeNotFound(false);\n      setFieldValue(\"state\", zipCodeObject.state);\n      setFieldValue(\"city\", zipCodeObject.city);\n    }\n\n    setFieldValue(\"newZipCode\", \"\");\n  }, []); //\n  // const convertPhoneNumberToUSFormat = useCallback((value: any) => {\n  //     const x = value.replace(/\\D/g, '').match(/(\\d{0,3})(\\d{0,3})(\\d{0,4})/);\n  //     value = !x[2] ? x[1] : '(' + x[1] + ') ' + x[2] + (x[3] ? '-' + x[3] : '');\n  //     if (basicFormRef.current) {\n  //         console.log(value);\n  //         basicFormRef.current.setFieldValue('phoneNumber', value);\n  //     } else {\n  //         console.log('no ref');\n  //     }\n  // }, [formType, basicFormRef.current]);\n\n  const handleBackNavigation = useCallback(() => {\n    if (formType === \"advanced\") {\n      setFormType('basic');\n      setBasicFormInitialValues(basicDetails);\n    }\n  }, [basicDetails, formType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"register-screen screen\",\n    children: /*#__PURE__*/_jsxDEV(FormLayoutComponent, {\n      posterImagePath: ImageConfig.RegisterPoster,\n      onBackNavigation: formType === \"advanced\" ? handleBackNavigation : undefined,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-title\",\n        children: \"Let us begin with some basic questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), formType === 'basic' && /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: basicFormInitialValues,\n        validateOnChange: true,\n        validateOnBlur: false,\n        enableReinitialize: true,\n        validateOnMount: true,\n        innerRef: basicFormRef,\n        validationSchema: basicFormValidation,\n        onSubmit: onBasicFormSubmit,\n        children: _s(_ref3 => {\n          _s();\n\n          let {\n            isSubmitting,\n            isValid,\n            values,\n            validateForm\n          } = _ref3;\n          // eslint-disable-next-line react-hooks/rules-of-hooks\n          useEffect(() => {\n            validateForm();\n          }, [validateForm, values]);\n          return /*#__PURE__*/_jsxDEV(Form, {\n            className: \"registration-holder\",\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              name: 'firstName',\n              children: field => /*#__PURE__*/_jsxDEV(FormikInputComponent, {\n                placeholder: 'Enter First Name',\n                labelText: 'First Name',\n                type: \"text\",\n                required: true,\n                formikField: field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              name: 'middleName',\n              children: field => /*#__PURE__*/_jsxDEV(FormikInputComponent, {\n                placeholder: 'Enter Middle Name',\n                labelText: 'Middle Name',\n                type: \"text\",\n                formikField: field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              name: 'lastName',\n              children: field => /*#__PURE__*/_jsxDEV(FormikInputComponent, {\n                placeholder: 'Enter Last Name',\n                labelText: 'Last Name',\n                type: \"text\",\n                required: true,\n                formikField: field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                sm: 12,\n                md: 12,\n                lg: 6,\n                children: /*#__PURE__*/_jsxDEV(Field, {\n                  name: 'dateOfBirth',\n                  className: \"pdd-left-20\",\n                  children: field => /*#__PURE__*/_jsxDEV(FormikDatePickerComponent, {\n                    labelText: 'Date of Birth',\n                    showLabel: true,\n                    required: true,\n                    formikField: field,\n                    maxDate: new Date(),\n                    onUpdate: value => console.log(value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 255,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                sm: 12,\n                md: 12,\n                lg: 6,\n                children: /*#__PURE__*/_jsxDEV(Field, {\n                  name: 'phoneNumber',\n                  children: field => /*#__PURE__*/_jsxDEV(FormikPhoneInputComponent, {\n                    placeholder: 'Enter Phone Number',\n                    labelText: 'Phone Number',\n                    required: true,\n                    onUpdate: value => value,\n                    formikField: field\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              name: 'emailId',\n              children: field => /*#__PURE__*/_jsxDEV(FormikInputComponent, {\n                placeholder: 'Enter Email ID',\n                labelText: 'Email ID',\n                required: true,\n                formikField: field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-actions\",\n              children: /*#__PURE__*/_jsxDEV(ButtonComponent, {\n                fullWidth: true,\n                isLoading: isSubmitting,\n                disabled: isSubmitting || !isValid,\n                type: \"submit\",\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 36\n          }, this);\n        }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this), formType === 'advanced' && /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: advancedFormInitialValues,\n        validateOnChange: true,\n        validateOnBlur: false,\n        enableReinitialize: true,\n        validateOnMount: true,\n        validationSchema: advancedFormValidation,\n        onSubmit: onAdvancedFormSubmit,\n        children: _s2(_ref4 => {\n          _s2();\n\n          let {\n            isSubmitting,\n            values,\n            isValid,\n            validateForm\n          } = _ref4;\n          // eslint-disable-next-line react-hooks/rules-of-hooks\n          useEffect(() => {\n            validateForm();\n          }, [validateForm, values]);\n          return /*#__PURE__*/_jsxDEV(Form, {\n            className: \"registration-holder\",\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              name: 'gender',\n              children: field => /*#__PURE__*/_jsxDEV(FormikSelectDropdownComponent, {\n                formikField: field,\n                fullWidth: true,\n                labelText: \"Gender\",\n                required: true,\n                isClearable: false,\n                searchable: false,\n                hideSelectedOptions: false,\n                displayWith: option => option === null || option === void 0 ? void 0 : option.title,\n                compareWith: option => option === null || option === void 0 ? void 0 : option.code,\n                placeholder: \"Select Your Gender\",\n                data: CommonService._staticData.genderOptions\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                sm: 12,\n                md: 12,\n                lg: 6,\n                children: /*#__PURE__*/_jsxDEV(Field, {\n                  name: 'heightInFeet',\n                  children: field => /*#__PURE__*/_jsxDEV(FormikSelectDropdownComponent, {\n                    formikField: field,\n                    fullWidth: true,\n                    labelText: \"Height\",\n                    isClearable: false,\n                    searchable: false,\n                    hideSelectedOptions: false,\n                    displayWith: option => option === null || option === void 0 ? void 0 : option.title,\n                    compareWith: option => option === null || option === void 0 ? void 0 : option.code,\n                    placeholder: \"Select Height in feet\",\n                    data: CommonService._staticData.heightInFeet\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 351,\n                    columnNumber: 57\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                sm: 12,\n                md: 12,\n                lg: 6,\n                children: [/*#__PURE__*/_jsxDEV(Visible, {\n                  xl: true,\n                  xxl: true,\n                  children: /*#__PURE__*/_jsxDEV(LabelComponent, {\n                    title: \"-\",\n                    styles: {\n                      color: \"#fff\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 369,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 368,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  name: 'heightInInches',\n                  children: field => /*#__PURE__*/_jsxDEV(FormikSelectDropdownComponent, {\n                    formikField: field,\n                    fullWidth: true,\n                    isClearable: false,\n                    searchable: false,\n                    hideSelectedOptions: false,\n                    displayWith: option => option === null || option === void 0 ? void 0 : option.title,\n                    compareWith: option => option === null || option === void 0 ? void 0 : option.code,\n                    placeholder: \"Select height in inches\",\n                    data: CommonService._staticData.heightInInches\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 374,\n                    columnNumber: 57\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              name: 'weight',\n              children: field => /*#__PURE__*/_jsxDEV(FormikInputComponent, {\n                placeholder: 'Enter weight in lbs',\n                labelText: 'Weight (in lbs)',\n                type: \"number\",\n                required: true,\n                formikField: field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              name: 'zipcode',\n              children: field => /*#__PURE__*/_jsxDEV(FormikSelectDropdownComponent, {\n                formikField: field,\n                fullWidth: true,\n                labelText: \"ZIP Code\",\n                required: true,\n                isClearable: true,\n                searchable: true,\n                searchMode: \"serverSide\",\n                method: APIConfig.ZIPCODE_LIST.METHOD,\n                multiple: false,\n                dataListKey: \"data.docs\",\n                url: APIConfig.ZIPCODE_LIST.URL,\n                displayWith: option => option === null || option === void 0 ? void 0 : option.zipcode,\n                compareWith: option => option === null || option === void 0 ? void 0 : option.zipcode,\n                placeholder: \"Search ZIP Code\",\n                onUpdate: value => {\n                  handleZipCodeValueChange(value, field.form.setFieldValue);\n                },\n                data: [],\n                defaultData: [{\n                  zipcode: \"Other\"\n                }]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 37\n            }, this), isZipCodeNotFound ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                name: 'newZipCode',\n                children: field => /*#__PURE__*/_jsxDEV(FormikInputComponent, {\n                  placeholder: \"Enter New Zip Code\",\n                  labelText: 'New Zip Code',\n                  required: true,\n                  type: \"text\",\n                  formikField: field\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 441,\n                  columnNumber: 57\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                name: 'state',\n                children: field => /*#__PURE__*/_jsxDEV(FormikSelectDropdownComponent, {\n                  formikField: field,\n                  fullWidth: true,\n                  labelText: \"State\",\n                  required: true,\n                  isClearable: true,\n                  searchable: true,\n                  searchMode: \"serverSide\",\n                  method: APIConfig.STATE_LIST.METHOD,\n                  multiple: false,\n                  dataListKey: \"data.docs\",\n                  url: APIConfig.STATE_LIST.URL,\n                  displayWith: option => option === null || option === void 0 ? void 0 : option.state,\n                  compareWith: option => option === null || option === void 0 ? void 0 : option.state,\n                  placeholder: \"Search State\",\n                  onUpdate: value => {\n                    setState(value === null || value === void 0 ? void 0 : value.state);\n                    field.form.setFieldValue(\"city\", '');\n                  },\n                  data: []\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 57\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                name: 'city',\n                children: field => /*#__PURE__*/_jsxDEV(FormikSelectDropdownComponent, {\n                  formikField: field,\n                  fullWidth: true,\n                  labelText: \"City\",\n                  required: true,\n                  isClearable: true,\n                  searchable: true,\n                  disabled: !state,\n                  searchMode: \"serverSide\",\n                  method: APIConfig.CITY_LIST.METHOD,\n                  multiple: false,\n                  dataListKey: \"data.docs\",\n                  url: APIConfig.CITY_LIST.URL,\n                  displayWith: option => option === null || option === void 0 ? void 0 : option.city,\n                  compareWith: option => option === null || option === void 0 ? void 0 : option.city,\n                  placeholder: \"Search for City\",\n                  data: []\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 482,\n                  columnNumber: 57\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 479,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                name: 'state',\n                children: field => /*#__PURE__*/_jsxDEV(FormikInputComponent, {\n                  className: \"text-transform\",\n                  placeholder: \"Enter state\",\n                  labelText: 'State',\n                  required: true,\n                  type: \"text\",\n                  inputProps: {\n                    readOnly: true\n                  },\n                  formikField: field\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 509,\n                  columnNumber: 57\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                name: 'city',\n                children: field => /*#__PURE__*/_jsxDEV(FormikInputComponent, {\n                  className: \"text-transform\",\n                  placeholder: \"Enter city\",\n                  labelText: 'City',\n                  required: true,\n                  type: \"text\",\n                  inputProps: {\n                    readOnly: true\n                  },\n                  formikField: field\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 527,\n                  columnNumber: 57\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 524,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-actions\",\n              children: /*#__PURE__*/_jsxDEV(ButtonComponent, {\n                fullWidth: true,\n                isLoading: isSubmitting,\n                disabled: isSubmitting || !isValid,\n                type: \"submit\",\n                children: \"Proceed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 544,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 33\n          }, this);\n        }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 9\n  }, this);\n};\n\n_s3(RegisterScreen, \"QIQX/ceWUF5ihAYNXUct65WewQM=\", false, function () {\n  return [useDispatch, useNavigate];\n});\n\n_c = RegisterScreen;\nexport default RegisterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterScreen\");","map":{"version":3,"names":["Yup","Field","Form","Formik","FormikInputComponent","React","useCallback","useEffect","useRef","useState","FormikDatePickerComponent","FormikPhoneInputComponent","ButtonComponent","CommonService","FormikSelectDropdownComponent","APIConfig","ImageConfig","useDispatch","setIsUserFromRegisterScreen","setLoggedInUserData","setLoggedInUserToken","useNavigate","FormLayoutComponent","Col","Row","Visible","LabelComponent","basicFormValidation","object","firstName","string","required","matches","max","middleName","lastName","dateOfBirth","nullable","emailId","email","phoneNumber","advancedFormValidation","gender","mixed","weight","number","zipcode","state","city","newZipCode","when","is","toLowerCase","then","BasicFormInitialValues","AdvancedFormInitialValues","heightInInches","heightInFeet","RegisterScreen","props","dispatch","navigate","setState","isZipCodeNotFound","setIsZipCodeNotFound","basicDetails","setBasicDetails","formType","setFormType","basicFormInitialValues","setBasicFormInitialValues","advancedFormInitialValues","basicFormRef","onBasicFormSubmit","values","setSubmitting","setErrors","payload","onAdvancedFormSubmit","convertDateFormat","replace","replaceAll","code","_user","registerPatient","response","_alert","showToast","message","data","token","_routeConfig","IntakeFormRoute","catch","error","handleErrors","handleZipCodeValueChange","zipCodeObject","setFieldValue","handleBackNavigation","RegisterPoster","undefined","isSubmitting","isValid","validateForm","field","Date","value","console","log","option","title","_staticData","genderOptions","color","ZIPCODE_LIST","METHOD","URL","form","STATE_LIST","CITY_LIST","readOnly"],"sources":["/Users/saicharanchinna/Documents/Arty-Crafty-UI/src/screens/auth/register/RegisterScreen.tsx"],"sourcesContent":["import \"./RegisterScreen.scss\";\nimport * as Yup from \"yup\";\nimport \"yup-phone\";\nimport {Field, FieldProps, Form, Formik, FormikHelpers, FormikProps} from 'formik';\nimport FormikInputComponent from \"../../../shared/components/core/formik-input/FormikInputComponent\";\nimport React, {useCallback, useEffect, useRef, useState} from \"react\";\nimport FormikDatePickerComponent from \"../../../shared/components/core/formik-date-picker/FormikDatePickerComponent\";\nimport FormikPhoneInputComponent from \"../../../shared/components/core/formik-phone-input/FormikPhoneInputComponent\";\nimport ButtonComponent from \"../../../shared/components/core/button/ButtonComponent\";\nimport {CommonService} from \"../../../shared/services\";\nimport FormikSelectDropdownComponent\n    from \"../../../shared/components/core/formik-select-dropdown/FormikSelectDropdownComponent\";\nimport {APIConfig, ImageConfig} from \"../../../constants\";\nimport {IAPIResponseType} from \"../../../shared/models/api.model\";\nimport {useDispatch} from \"react-redux\";\nimport {\n    setIsUserFromRegisterScreen,\n    setLoggedInUserData,\n    setLoggedInUserToken\n} from \"../../../store/actions/account.action\";\nimport {useNavigate} from \"react-router-dom\";\nimport FormLayoutComponent from \"../../../layouts/form-layout/FormLayout\";\nimport {Col, Row, Visible} from \"react-grid-system\";\nimport LabelComponent from \"../../../shared/components/core/label/LabelComponent\";\n\ninterface LoginScreenProps {\n\n}\n\nconst basicFormValidation = Yup.object({\n            firstName: Yup.string()\n                .required(\"Required\")\n                .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for this field \")\n                .max(100, 'First name maximum limit should be 100 characters'),\n            middleName: Yup.string()\n                .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for this field \")\n                .max(100, 'Middle name maximum limit should be 100 characters'),\n            lastName: Yup.string()\n                .required(\"Required\")\n                .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for this field \")\n                .max(100, 'Last name maximum limit should be 100 characters'),\n            dateOfBirth: Yup.string().required(\"Required\").nullable(),\n            emailId: Yup.string().email(\"Enter a valid email\").required(\"Required\"),\n            phoneNumber: Yup.string()\n                .required('Required')\n                .matches(/^(\\([0-9]{3}\\) |[0-9]{3}-)[0-9]{3}-[0-9]{4}$/, 'Invalid phone number')\n        }\n    )\n;\n\nconst advancedFormValidation = Yup.object({\n    gender: Yup.mixed().required(\"Required\"),\n    weight: Yup.number()\n        .max(1400, 'Max weight can be 1400 lbs')\n        .required(\"Required\"),\n    zipcode: Yup.mixed().required(\"Required\"),\n    state: Yup.mixed().required(\"Required\"),\n    city: Yup.mixed().required(\"Required\"),\n    newZipCode: Yup.string().when('zipcode', {\n        is: (zipcode: any) => (zipcode?.zipcode && zipcode?.zipcode?.toLowerCase() === \"other\"),\n        then: Yup.string().required('Required')\n    }),\n});\n\ninterface basicRegisterFormSchema {\n    firstName: string;\n    middleName: string;\n    lastName: string;\n    dateOfBirth: string;\n    emailId: string;\n    phoneNumber: string;\n}\n\ninterface advancedRegisterFormSchema {\n    gender: any;\n    zipcode: any;\n    heightInInches: string;\n    heightInFeet: string;\n    weight: string;\n    state: any;\n    city: any;\n}\n\nconst BasicFormInitialValues: basicRegisterFormSchema = {\n    firstName: \"\",\n    middleName: \"\",\n    lastName: \"\",\n    dateOfBirth: \"\",\n    emailId: \"\",\n    phoneNumber: \"\",\n}\nconst AdvancedFormInitialValues: advancedRegisterFormSchema = {\n    gender: \"\",\n    heightInInches: '',\n    heightInFeet: '',\n    weight: '',\n    zipcode: \"\",\n    state: \"\",\n    city: \"\",\n}\n\nconst RegisterScreen = (props: LoginScreenProps) => {\n\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [state, setState] = useState<string>(\"\");\n    const [isZipCodeNotFound, setIsZipCodeNotFound] = useState<boolean>(false);\n    const [basicDetails, setBasicDetails] = useState<any>();\n    const [formType, setFormType] = useState<'basic' | 'advanced'>('basic');\n    const [basicFormInitialValues, setBasicFormInitialValues] = useState(BasicFormInitialValues);\n    const [advancedFormInitialValues] = useState(AdvancedFormInitialValues);\n    const basicFormRef = useRef<FormikProps<any>>(null);\n\n    const onBasicFormSubmit = useCallback((values: any, {setSubmitting, setErrors}: FormikHelpers<any>) => {\n        const payload = {...values};\n        setBasicDetails(payload);\n        setFormType('advanced');\n    }, []);\n\n    const onAdvancedFormSubmit = useCallback((values: any, {setSubmitting, setErrors}: FormikHelpers<any>) => {\n        const payload = {...values, ...basicDetails};\n        payload['dateOfBirth'] = CommonService.convertDateFormat(payload['dateOfBirth'], 'YYYY-MM-DD')\n        const phoneNumber = payload['phoneNumber'].replace(/[^0-9a-zA-Z. ]/g, '');\n        payload['phoneNumber'] = phoneNumber.replaceAll(' ', '')\n        payload[\"gender\"] = payload?.gender?.code;\n        payload[\"heightInFeet\"] = payload?.heightInFeet?.code;\n        payload[\"heightInInches\"] = payload?.heightInInches?.code;\n        if (payload[\"newZipCode\"]) {\n            payload[\"zipcode\"] = payload[\"newZipCode\"];\n            payload[\"state\"] = payload?.state?.state;\n            payload[\"city\"] = payload?.city?.city;\n            delete payload[\"newZipCode\"];\n        } else {\n            payload[\"zipcode\"] = payload?.zipcode?.zipcode;\n        }\n        setSubmitting(true);\n        CommonService._user.registerPatient(payload)\n            .then((response: IAPIResponseType<any>) => {\n                CommonService._alert.showToast(response?.message || \"Patient has been Registered\", \"success\");\n                dispatch(setLoggedInUserData(response.data));\n                dispatch(setLoggedInUserToken(response.data.token));\n                dispatch(setIsUserFromRegisterScreen(true));\n                setSubmitting(false);\n                navigate(CommonService._routeConfig.IntakeFormRoute());\n            })\n            .catch((error: any) => {\n                CommonService.handleErrors(setErrors, error);\n                setSubmitting(false);\n            })\n    }, [basicDetails, dispatch, navigate]);\n\n    const handleZipCodeValueChange = useCallback((zipCodeObject: any, setFieldValue: any) => {\n        if (zipCodeObject?.zipcode?.toLowerCase() === \"other\") {\n            setIsZipCodeNotFound(true);\n            setFieldValue(\"state\", \"\");\n            setFieldValue(\"city\", \"\");\n        } else {\n            setIsZipCodeNotFound(false);\n            setFieldValue(\"state\", zipCodeObject.state);\n            setFieldValue(\"city\", zipCodeObject.city);\n        }\n        setFieldValue(\"newZipCode\", \"\");\n    }, []);\n    //\n    // const convertPhoneNumberToUSFormat = useCallback((value: any) => {\n    //     const x = value.replace(/\\D/g, '').match(/(\\d{0,3})(\\d{0,3})(\\d{0,4})/);\n    //     value = !x[2] ? x[1] : '(' + x[1] + ') ' + x[2] + (x[3] ? '-' + x[3] : '');\n    //     if (basicFormRef.current) {\n    //         console.log(value);\n    //         basicFormRef.current.setFieldValue('phoneNumber', value);\n    //     } else {\n    //         console.log('no ref');\n    //     }\n    // }, [formType, basicFormRef.current]);\n\n    const handleBackNavigation = useCallback(() => {\n        if (formType === \"advanced\") {\n            setFormType('basic');\n            setBasicFormInitialValues(basicDetails);\n        }\n    }, [basicDetails, formType]);\n\n    return (\n        <div className=\"register-screen screen\">\n            <FormLayoutComponent\n                posterImagePath={ImageConfig.RegisterPoster}\n                onBackNavigation={formType === \"advanced\" ? handleBackNavigation : undefined}\n            >\n                <div className={\"form-title\"}>\n                    Let us begin with some basic questions\n                </div>\n                {formType === 'basic' &&\n                    <Formik\n                        initialValues={basicFormInitialValues}\n                        validateOnChange={true}\n                        validateOnBlur={false}\n                        enableReinitialize={true}\n                        validateOnMount={true}\n                        innerRef={basicFormRef}\n                        validationSchema={basicFormValidation}\n                        onSubmit={onBasicFormSubmit}\n                    >\n                        {({isSubmitting, isValid, values, validateForm}) => {\n                            // eslint-disable-next-line react-hooks/rules-of-hooks\n                            useEffect(() => {\n                                validateForm();\n                            }, [validateForm, values]);\n                            return <Form className={\"registration-holder\"}>\n                                <Field name={'firstName'}>\n                                    {\n                                        (field: FieldProps) => (\n                                            <FormikInputComponent\n                                                placeholder={'Enter First Name'}\n                                                labelText={'First Name'}\n                                                type={\"text\"}\n                                                required={true}\n                                                formikField={field}\n                                            />\n                                        )\n                                    }\n                                </Field>\n\n                                <Field name={'middleName'}>\n                                    {\n                                        (field: FieldProps) => (\n                                            <FormikInputComponent\n                                                placeholder={'Enter Middle Name'}\n                                                labelText={'Middle Name'}\n                                                type={\"text\"}\n                                                formikField={field}\n                                            />\n                                        )\n                                    }\n                                </Field>\n\n                                <Field name={'lastName'}>\n                                    {\n                                        (field: FieldProps) => (\n                                            <FormikInputComponent\n                                                placeholder={'Enter Last Name'}\n                                                labelText={'Last Name'}\n                                                type={\"text\"}\n                                                required={true}\n                                                formikField={field}\n                                            />\n                                        )\n                                    }\n                                </Field>\n                                <br/>\n                                <Row>\n                                    <Col sm={12} md={12} lg={6}>\n                                        <Field name={'dateOfBirth'} className=\"pdd-left-20\">\n                                            {\n                                                (field: FieldProps) => (\n                                                    <FormikDatePickerComponent\n                                                        labelText={'Date of Birth'}\n                                                        showLabel={true}\n                                                        required={true}\n                                                        formikField={field}\n                                                        maxDate={new Date()}\n                                                        onUpdate={(value: any) => console.log(value)}\n                                                    />\n                                                )\n                                            }\n                                        </Field>\n                                    </Col>\n\n                                    <Col sm={12} md={12} lg={6}>\n                                        <Field name={'phoneNumber'}>\n                                            {\n                                                (field: FieldProps) => (\n                                                    <FormikPhoneInputComponent\n                                                        placeholder={'Enter Phone Number'}\n                                                        labelText={'Phone Number'}\n                                                        required={true}\n                                                        onUpdate={(value: any) => value}\n                                                        formikField={field}\n                                                    />\n                                                )\n                                            }\n                                        </Field>\n                                    </Col>\n                                </Row>\n                                <Field name={'emailId'}>\n                                    {\n                                        (field: FieldProps) => (\n                                            <FormikInputComponent\n                                                placeholder={'Enter Email ID'}\n                                                labelText={'Email ID'}\n                                                required={true}\n                                                formikField={field}\n                                            />\n                                        )\n                                    }\n                                </Field>\n                                <br/>\n                                <div className=\"form-actions\">\n                                    <ButtonComponent\n                                        fullWidth={true}\n                                        isLoading={isSubmitting}\n                                        disabled={isSubmitting || !isValid}\n                                        type={\"submit\"}>Next\n                                    </ButtonComponent>\n                                </div>\n                            </Form>\n                        }}\n                    </Formik>\n                }\n\n                {formType === 'advanced' &&\n                    <Formik\n                        initialValues={advancedFormInitialValues}\n                        validateOnChange={true}\n                        validateOnBlur={false}\n                        enableReinitialize={true}\n                        validateOnMount={true}\n                        validationSchema={advancedFormValidation}\n                        onSubmit={onAdvancedFormSubmit}\n                    >\n                        {({isSubmitting, values, isValid, validateForm}) => {\n                            // eslint-disable-next-line react-hooks/rules-of-hooks\n                            useEffect(() => {\n                                validateForm();\n                            }, [validateForm, values]);\n                            return (\n                                <Form className={\"registration-holder\"}>\n                                    <Field name={'gender'}>\n                                        {\n                                            (field: FieldProps) => (\n                                                <FormikSelectDropdownComponent\n                                                    formikField={field}\n                                                    fullWidth={true}\n                                                    labelText={\"Gender\"}\n                                                    required={true}\n                                                    isClearable={false}\n                                                    searchable={false}\n                                                    hideSelectedOptions={false}\n                                                    displayWith={(option: any) => option?.title}\n                                                    compareWith={(option: any) => option?.code}\n                                                    placeholder={\"Select Your Gender\"}\n                                                    data={CommonService._staticData.genderOptions}\n                                                />\n                                            )\n                                        }\n                                    </Field>\n                                    <Row>\n                                        <Col sm={12} md={12} lg={6}>\n                                            <Field name={'heightInFeet'}>\n                                                {\n                                                    (field: FieldProps) => (\n                                                        <FormikSelectDropdownComponent\n                                                            formikField={field}\n                                                            fullWidth={true}\n                                                            labelText={\"Height\"}\n                                                            isClearable={false}\n                                                            searchable={false}\n                                                            hideSelectedOptions={false}\n                                                            displayWith={(option: any) => option?.title}\n                                                            compareWith={(option: any) => option?.code}\n                                                            placeholder={\"Select Height in feet\"}\n                                                            data={CommonService._staticData.heightInFeet}\n                                                        />\n                                                    )\n                                                }\n                                            </Field>\n                                        </Col>\n                                        <Col sm={12} md={12} lg={6}>\n                                            <Visible xl xxl>\n                                                <LabelComponent title={\"-\"} styles={{color: \"#fff\"}}/>\n                                            </Visible>\n                                            <Field name={'heightInInches'}>\n                                                {\n                                                    (field: FieldProps) => (\n                                                        <FormikSelectDropdownComponent\n                                                            formikField={field}\n                                                            fullWidth={true}\n                                                            isClearable={false}\n                                                            searchable={false}\n                                                            hideSelectedOptions={false}\n                                                            displayWith={(option: any) => option?.title}\n                                                            compareWith={(option: any) => option?.code}\n                                                            placeholder={\"Select height in inches\"}\n                                                            data={CommonService._staticData.heightInInches}\n                                                        />\n                                                    )\n                                                }\n                                            </Field>\n                                        </Col>\n                                    </Row>\n\n                                    <Field name={'weight'}>\n                                        {\n                                            (field: FieldProps) => (\n                                                <FormikInputComponent\n                                                    placeholder={'Enter weight in lbs'}\n                                                    labelText={'Weight (in lbs)'}\n                                                    type={\"number\"}\n                                                    required={true}\n                                                    formikField={field}\n                                                />\n                                            )\n                                        }\n                                    </Field>\n\n                                    <Field name={'zipcode'}>\n                                        {\n                                            (field: FieldProps) => (\n                                                <FormikSelectDropdownComponent\n                                                    formikField={field}\n                                                    fullWidth={true}\n                                                    labelText={\"ZIP Code\"}\n                                                    required={true}\n                                                    isClearable={true}\n                                                    searchable={true}\n                                                    searchMode={\"serverSide\"}\n                                                    method={APIConfig.ZIPCODE_LIST.METHOD}\n                                                    multiple={false}\n                                                    dataListKey={\"data.docs\"}\n                                                    url={APIConfig.ZIPCODE_LIST.URL}\n                                                    displayWith={(option: any) => option?.zipcode}\n                                                    compareWith={(option: any) => option?.zipcode}\n                                                    placeholder={\"Search ZIP Code\"}\n                                                    onUpdate={(value: any) => {\n                                                        handleZipCodeValueChange(value, field.form.setFieldValue)\n                                                    }}\n                                                    data={[]}\n                                                    defaultData={[\n                                                        {\n                                                            zipcode: \"Other\"\n                                                        }\n                                                    ]}\n                                                />\n                                            )\n                                        }\n                                    </Field>\n                                    {isZipCodeNotFound ?\n                                        <>\n                                            <Field name={'newZipCode'}>\n                                                {\n                                                    (field: FieldProps) => (\n                                                        <FormikInputComponent\n                                                            placeholder={\"Enter New Zip Code\"}\n                                                            labelText={'New Zip Code'}\n                                                            required={true}\n                                                            type={\"text\"}\n                                                            formikField={field}\n                                                        />\n                                                    )\n                                                }\n                                            </Field>\n\n                                            <Field name={'state'}>\n                                                {\n                                                    (field: FieldProps) => (\n                                                        <FormikSelectDropdownComponent\n                                                            formikField={field}\n                                                            fullWidth={true}\n                                                            labelText={\"State\"}\n                                                            required={true}\n                                                            isClearable={true}\n                                                            searchable={true}\n                                                            searchMode={\"serverSide\"}\n                                                            method={APIConfig.STATE_LIST.METHOD}\n                                                            multiple={false}\n                                                            dataListKey={\"data.docs\"}\n                                                            url={APIConfig.STATE_LIST.URL}\n                                                            displayWith={(option: any) => option?.state}\n                                                            compareWith={(option: any) => option?.state}\n                                                            placeholder={\"Search State\"}\n                                                            onUpdate={(value: any) => {\n                                                                setState(value?.state);\n                                                                field.form.setFieldValue(\"city\", '');\n                                                            }}\n                                                            data={[]}\n                                                        />\n                                                    )\n                                                }\n                                            </Field>\n                                            <Field name={'city'}>\n                                                {\n                                                    (field: FieldProps) => (\n                                                        <FormikSelectDropdownComponent\n                                                            formikField={field}\n                                                            fullWidth={true}\n                                                            labelText={\"City\"}\n                                                            required={true}\n                                                            isClearable={true}\n                                                            searchable={true}\n                                                            disabled={!state}\n                                                            searchMode={\"serverSide\"}\n                                                            method={APIConfig.CITY_LIST.METHOD}\n                                                            multiple={false}\n                                                            dataListKey={\"data.docs\"}\n                                                            url={APIConfig.CITY_LIST.URL}\n                                                            displayWith={(option: any) => option?.city}\n                                                            compareWith={(option: any) => option?.city}\n                                                            placeholder={\"Search for City\"}\n                                                            data={[]}\n                                                        />\n                                                    )\n                                                }\n                                            </Field>\n                                        </>\n                                        :\n                                        <>\n                                            <Field name={'state'}>\n                                                {\n                                                    (field: FieldProps) => (\n                                                        <FormikInputComponent\n                                                            className={\"text-transform\"}\n                                                            placeholder={\"Enter state\"}\n                                                            labelText={'State'}\n                                                            required={true}\n                                                            type={\"text\"}\n                                                            inputProps={{\n                                                                readOnly: true\n                                                            }}\n                                                            formikField={field}\n                                                        />\n                                                    )\n                                                }\n                                            </Field>\n\n                                            <Field name={'city'}>\n                                                {\n                                                    (field: FieldProps) => (\n                                                        <FormikInputComponent\n                                                            className={\"text-transform\"}\n                                                            placeholder={\"Enter city\"}\n                                                            labelText={'City'}\n                                                            required={true}\n                                                            type={\"text\"}\n                                                            inputProps={{\n                                                                readOnly: true\n                                                            }}\n                                                            formikField={field}\n                                                        />\n                                                    )\n                                                }\n                                            </Field>\n                                        </>\n                                    }\n                                    <div className=\"form-actions\">\n                                        <ButtonComponent\n                                            fullWidth={true}\n                                            isLoading={isSubmitting}\n                                            disabled={isSubmitting || !isValid}\n                                            type={\"submit\"}>\n                                            Proceed\n                                        </ButtonComponent>\n                                    </div>\n                                </Form>\n                            )\n                        }}\n                    </Formik>\n                }\n            </FormLayoutComponent>\n        </div>\n    )\n};\n\nexport default RegisterScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}