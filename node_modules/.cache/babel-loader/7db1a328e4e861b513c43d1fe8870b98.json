{"ast":null,"code":"var _jsxFileName = \"/Users/saicharanchinna/Documents/Arty-Crafty-UI/src/screens/intake-form/IntakeFormScreen.tsx\",\n    _s2 = $RefreshSig$();\n\nimport \"./IntakeFormScreen.scss\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport LoaderComponent from \"../../shared/components/loader/loaderComponent\";\nimport StatusCardComponent from \"../../shared/components/status-card/statusCardComponent\";\nimport IntakeFormLayoutComponent from \"../../layouts/intake-form-layout/IntakeFormLayout\";\nimport { Form, Formik } from \"formik\";\nimport ButtonComponent from \"../../shared/components/core/button/ButtonComponent\";\nimport FormControlParserComponent from \"../../shared/components/form-control-parser/FormControlParserComponent\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { CommonService } from \"../../shared/services\";\nimport * as yup from \"yup\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENABLE_FORM_DEBUG_MODE = false;\n\nconst IntakeFormScreen = props => {\n  _s2();\n\n  const navigate = useNavigate();\n  const {\n    token,\n    currentUser,\n    isUserFromRegister\n  } = useSelector(state => state.account);\n  const [formData, setFormData] = useState({\n    temperature: \"98.6\"\n  });\n  const [isFormDataBeingSubmitted, setIsFormDataBeingSubmitted] = useState(false);\n  const [currentStepData, setCurrentStepData] = useState({});\n  const [isPatientIntakeFormLoadingFailed, setIsPatientIntakeFormLoadingFailed] = useState([]);\n  const [isPatientIntakeFormLoaded, setIsPatientIntakeFormLoaded] = useState([]);\n  const [isPatientIntakeFormLoading, setIsPatientIntakeFormLoading] = useState([]);\n  const [stepsData, setStepsData] = useState([]);\n  const [currentStepQuestions, setCurrentStepQuestions] = useState([]);\n  const [isAtLeastOneQuestionAnsweredInCurrentStep, setIsAtLeastOneQuestionAnsweredInCurrentStep] = useState(false);\n  const [searchParams] = useSearchParams();\n  const sampleId = searchParams.get('sampleId');\n  const orderId = searchParams.get('orderId');\n  const handlePrevious = useCallback(() => {\n    const currentStepIndex = stepsData.length - 1;\n    const prevStepIndex = currentStepIndex - 1;\n    const prevStepData = stepsData[prevStepIndex];\n    setStepsData(prevState => {\n      return prevState.filter((item, index) => index !== currentStepIndex);\n    });\n    setCurrentStepData(prevStepData);\n  }, [stepsData]);\n  const getTestPanelIntakeForm = useCallback(() => {\n    setIsPatientIntakeFormLoading(true);\n    setIsPatientIntakeFormLoaded(false);\n    setIsPatientIntakeFormLoadingFailed(false);\n    let currentStepFormData = [];\n    let payload = {};\n    payload = { ...payload,\n      formId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.formId,\n      panelId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.panelId\n    };\n\n    if (sampleId) {\n      payload = { ...payload,\n        sampleId: sampleId\n      };\n    }\n\n    if (orderId) {\n      payload = { ...payload,\n        orderId: orderId\n      };\n    }\n\n    if (token) {\n      CommonService._staticData.getTestPanelIntakeForm(token, payload).then(response => {\n        if (response !== null && response !== void 0 && response.data) {\n          currentStepFormData = response.data;\n        }\n\n        setCurrentStepData(currentStepFormData);\n        const stepQuestions = currentStepFormData.questions;\n        let currentStepQuestionsData = [];\n        stepQuestions.forEach(question => {\n          currentStepQuestionsData.push(question.code);\n        });\n        setCurrentStepQuestions(currentStepQuestionsData);\n        setStepsData([currentStepFormData]);\n        setIsPatientIntakeFormLoading(false);\n        setIsPatientIntakeFormLoaded(true);\n        setIsPatientIntakeFormLoadingFailed(false);\n      }).catch(error => {\n        setCurrentStepData(currentStepFormData);\n        setStepsData([]);\n        setIsPatientIntakeFormLoading(false);\n        setIsPatientIntakeFormLoaded(false);\n        setIsPatientIntakeFormLoadingFailed(true);\n      });\n    }\n  }, [token, currentUser, orderId, sampleId]);\n  useEffect(() => {\n    getTestPanelIntakeForm();\n  }, [getTestPanelIntakeForm]);\n  const submitIntakeFormDataToAPI = useCallback(formData => {\n    const finalPayload = {};\n\n    if (currentStepData) {\n      const currentStepFlatQuestions = CommonService.getFlatQuestionList(currentStepData);\n      const patientIntakeFormQuestionsMapping = {};\n      currentStepFlatQuestions.forEach(question => {\n        patientIntakeFormQuestionsMapping[question.code] = question;\n      });\n      Object.keys(formData).forEach(questionName => {\n        const questionData = patientIntakeFormQuestionsMapping[questionName];\n\n        switch (questionData === null || questionData === void 0 ? void 0 : questionData.formControlType) {\n          case \"TextBox\":\n          case \"RadioButton\":\n          case \"RadioButtonGroup\":\n          case \"TemperatureSlider\":\n            finalPayload[questionName] = formData[questionName];\n            break;\n\n          case \"SelectDropDown\":\n            if (questionData !== null && questionData !== void 0 && questionData.isMultiSelection) {\n              finalPayload[questionName] = CommonService.getArrayOfValuesOfOneKeyFromJSON(formData[questionName], \"code\");\n            } else {\n              var _formData$questionNam;\n\n              finalPayload[questionName] = (_formData$questionNam = formData[questionName]) === null || _formData$questionNam === void 0 ? void 0 : _formData$questionNam.code;\n            }\n\n            break;\n\n          case \"DatePicker\":\n            finalPayload[questionName] = CommonService.convertDateFormat(formData[questionName]);\n            break;\n\n          case \"CheckBox\":\n            finalPayload[questionName] = Object.keys(formData[questionName]).filter(item => formData[questionName][item] === true);\n            break;\n\n          default:\n            console.log(\"formControl type\", questionData === null || questionData === void 0 ? void 0 : questionData.formControlType, \"not handled\");\n        }\n      });\n    } // make an API call\n\n\n    setIsFormDataBeingSubmitted(true);\n    console.log(\"currentStepData\", currentUser);\n    let payload = {\n      stepId: currentStepData.stepId,\n      response: finalPayload,\n      panelId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.panelId,\n      sessionId: currentUser.sessionId,\n      formId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.formId\n    };\n\n    if (sampleId) {\n      payload.sampleId = sampleId;\n    }\n\n    if (orderId) {\n      payload.orderId = orderId;\n    }\n\n    if (token) {\n      CommonService._user.savePatientIntakeForm(token, payload).then(response => {\n        setIsAtLeastOneQuestionAnsweredInCurrentStep(false);\n\n        if (response.data.isTestCompleted) {\n          if (!isUserFromRegister) {\n            window.close();\n          }\n\n          navigate(CommonService._routeConfig.TestResultRoute());\n        } else {\n          var _response$data;\n\n          const nextStepData = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.nextStepData;\n          setStepsData(prevValue => {\n            return [...prevValue, nextStepData];\n          });\n          setCurrentStepData(nextStepData);\n          const stepQuestions = nextStepData.questions;\n          let currentStepQuestionsData = [];\n          stepQuestions.forEach(question => {\n            currentStepQuestionsData.push(question.code);\n          });\n          setCurrentStepQuestions(currentStepQuestionsData);\n        }\n\n        setIsFormDataBeingSubmitted(false);\n      }).catch(error => {\n        console.error(\"error\", error);\n\n        CommonService._alert.showToast('Error saving patient intake form');\n\n        setIsFormDataBeingSubmitted(false);\n      });\n    }\n  }, [navigate, currentStepData, token, currentUser, isUserFromRegister, orderId, sampleId]);\n  const handleNext = useCallback(values => {\n    setFormData({ ...formData,\n      ...values\n    });\n    submitIntakeFormDataToAPI(values);\n  }, [formData, submitIntakeFormDataToAPI]);\n  const renderPatientIntakeForm = useCallback((currentStepData, formData, handlePrevious, handleNext, isFormDataBeingSubmitted) => {\n    if (currentStepData) {\n      var _s = $RefreshSig$();\n\n      const questionValidationsObject = CommonService.createValidationsObject(currentStepData === null || currentStepData === void 0 ? void 0 : currentStepData.questions);\n      const yepSchema = questionValidationsObject === null || questionValidationsObject === void 0 ? void 0 : questionValidationsObject.reduce(CommonService.createYupSchema, {});\n      const validateSchema = yup.object().shape(yepSchema);\n      const initialIsValid = validateSchema.isValidSync(formData);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"intake-form-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(IntakeFormLayoutComponent, {\n          formMainTitle: currentStepData.title,\n          onBackNavigation: currentStepData !== null && currentStepData !== void 0 && currentStepData.canNavigateBack ? () => {\n            handlePrevious();\n          } : undefined,\n          toolTipInfo: currentStepData === null || currentStepData === void 0 ? void 0 : currentStepData.toolTipInfo,\n          progressInfo: currentStepData === null || currentStepData === void 0 ? void 0 : currentStepData.progressInfo,\n          posterImagePath: currentStepData === null || currentStepData === void 0 ? void 0 : currentStepData.assetUrl,\n          children: /*#__PURE__*/_jsxDEV(Formik, {\n            initialValues: formData,\n            enableReinitialize: true,\n            validateOnChange: true,\n            validateOnBlur: false,\n            validateOnMount: true,\n            isInitialValid: initialIsValid,\n            validationSchema: validateSchema,\n            onSubmit: values => {\n              handleNext(values);\n            },\n            children: _s(_ref => {\n              var _currentStepData$ques;\n\n              _s();\n\n              let {\n                errors,\n                isValid,\n                values,\n                validateForm\n              } = _ref;\n              // eslint-disable-next-line react-hooks/rules-of-hooks\n              useEffect(() => {\n                if (currentStepData.proceedButtonText === 'Skip') {\n                  let selectedOptions = [];\n                  Object.keys(values).forEach(options => {\n                    // TODO: Will work for skip logic with multi select dropdown only. make logic better to accommodate all other scenarios if any in future.\n                    if (currentStepQuestions.includes(options)) {\n                      selectedOptions.push(...values[options]);\n\n                      if (selectedOptions.length > 0) {\n                        setIsAtLeastOneQuestionAnsweredInCurrentStep(true);\n                      } else {\n                        setIsAtLeastOneQuestionAnsweredInCurrentStep(false);\n                      }\n                    }\n                  });\n                }\n\n                validateForm();\n              }, [values, validateForm]);\n              return /*#__PURE__*/_jsxDEV(Form, {\n                children: [ENABLE_FORM_DEBUG_MODE && /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    position: \"fixed\",\n                    top: \"0\",\n                    left: 0,\n                    height: \"400px\",\n                    width: \"700px\",\n                    boxShadow: \"1px 1px 10px 1px #ddd\",\n                    background: \"#fff\",\n                    overflow: \"auto\"\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [\"Errors: \", /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        wordWrap: \"break-word\"\n                      },\n                      children: JSON.stringify(errors)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 244,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 243,\n                    columnNumber: 33\n                  }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 248,\n                    columnNumber: 33\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [\"Values: \", /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        wordWrap: \"break-word\"\n                      },\n                      children: JSON.stringify(values)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 250,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 249,\n                    columnNumber: 33\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 56\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"intake-form-body\",\n                  children: [(_currentStepData$ques = currentStepData.questions) === null || _currentStepData$ques === void 0 ? void 0 : _currentStepData$ques.map((question, index) => {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [question.title && /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"intake-form-title\",\n                        children: question.title\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 260,\n                        columnNumber: 63\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: `intake-form-options ${question.autoHeight ? \"auto-height\" : \"\"}`,\n                        children: [question.subTitle && /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"intake-form-sub-title\",\n                          children: question.subTitle\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 267,\n                          columnNumber: 70\n                        }, this), /*#__PURE__*/_jsxDEV(FormControlParserComponent, {\n                          className: \"main-question\",\n                          question: question\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 271,\n                          columnNumber: 45\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 264,\n                        columnNumber: 41\n                      }, this)]\n                    }, question.title + index, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 258,\n                      columnNumber: 44\n                    }, this);\n                  }), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"intake-form-actions\",\n                    children: [/*#__PURE__*/_jsxDEV(ButtonComponent, {\n                      type: \"submit\",\n                      fullWidth: true,\n                      isLoading: isFormDataBeingSubmitted,\n                      disabled: !isValid || isFormDataBeingSubmitted,\n                      children: currentStepData.proceedButtonText === 'Skip' && isAtLeastOneQuestionAnsweredInCurrentStep ? 'Next' : currentStepData.proceedButtonText\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 278,\n                      columnNumber: 37\n                    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 284,\n                      columnNumber: 55\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 277,\n                    columnNumber: 33\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 32\n              }, this);\n            }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 16\n      }, this);\n    } else {\n      /*#__PURE__*/\n      _jsxDEV(_Fragment, {}, void 0, false);\n    }\n  }, [currentStepQuestions, isAtLeastOneQuestionAnsweredInCurrentStep]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'intake-form-screen screen',\n    children: [isPatientIntakeFormLoading && /*#__PURE__*/_jsxDEV(LoaderComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 43\n    }, this), isPatientIntakeFormLoadingFailed && /*#__PURE__*/_jsxDEV(StatusCardComponent, {\n      type: \"error\",\n      children: [\"Error loading Patient Intake Form \", JSON.stringify(\"\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }, this), isPatientIntakeFormLoaded && renderPatientIntakeForm(currentStepData, formData, handlePrevious, handleNext, isFormDataBeingSubmitted)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(IntakeFormScreen, \"JuHxtEAFocRzdG9RZRYpo4ZpNeg=\", false, function () {\n  return [useNavigate, useSelector, useSearchParams];\n});\n\n_c = IntakeFormScreen;\nexport default IntakeFormScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"IntakeFormScreen\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","LoaderComponent","StatusCardComponent","IntakeFormLayoutComponent","Form","Formik","ButtonComponent","FormControlParserComponent","useNavigate","useSearchParams","CommonService","yup","useSelector","ENABLE_FORM_DEBUG_MODE","IntakeFormScreen","props","navigate","token","currentUser","isUserFromRegister","state","account","formData","setFormData","temperature","isFormDataBeingSubmitted","setIsFormDataBeingSubmitted","currentStepData","setCurrentStepData","isPatientIntakeFormLoadingFailed","setIsPatientIntakeFormLoadingFailed","isPatientIntakeFormLoaded","setIsPatientIntakeFormLoaded","isPatientIntakeFormLoading","setIsPatientIntakeFormLoading","stepsData","setStepsData","currentStepQuestions","setCurrentStepQuestions","isAtLeastOneQuestionAnsweredInCurrentStep","setIsAtLeastOneQuestionAnsweredInCurrentStep","searchParams","sampleId","get","orderId","handlePrevious","currentStepIndex","length","prevStepIndex","prevStepData","prevState","filter","item","index","getTestPanelIntakeForm","currentStepFormData","payload","formId","panelId","_staticData","then","response","data","stepQuestions","questions","currentStepQuestionsData","forEach","question","push","code","catch","error","submitIntakeFormDataToAPI","finalPayload","currentStepFlatQuestions","getFlatQuestionList","patientIntakeFormQuestionsMapping","Object","keys","questionName","questionData","formControlType","isMultiSelection","getArrayOfValuesOfOneKeyFromJSON","convertDateFormat","console","log","stepId","sessionId","_user","savePatientIntakeForm","isTestCompleted","window","close","_routeConfig","TestResultRoute","nextStepData","prevValue","_alert","showToast","handleNext","values","renderPatientIntakeForm","questionValidationsObject","createValidationsObject","yepSchema","reduce","createYupSchema","validateSchema","object","shape","initialIsValid","isValidSync","title","canNavigateBack","undefined","toolTipInfo","progressInfo","assetUrl","errors","isValid","validateForm","proceedButtonText","selectedOptions","options","includes","position","top","left","height","width","boxShadow","background","overflow","wordWrap","JSON","stringify","map","autoHeight","subTitle"],"sources":["/Users/saicharanchinna/Documents/Arty-Crafty-UI/src/screens/intake-form/IntakeFormScreen.tsx"],"sourcesContent":["import \"./IntakeFormScreen.scss\";\nimport React, {useCallback, useEffect, useState} from \"react\";\nimport LoaderComponent from \"../../shared/components/loader/loaderComponent\";\nimport StatusCardComponent from \"../../shared/components/status-card/statusCardComponent\";\nimport IntakeFormLayoutComponent from \"../../layouts/intake-form-layout/IntakeFormLayout\";\nimport {Form, Formik} from \"formik\";\nimport ButtonComponent from \"../../shared/components/core/button/ButtonComponent\";\nimport FormControlParserComponent from \"../../shared/components/form-control-parser/FormControlParserComponent\";\nimport {useNavigate, useSearchParams} from \"react-router-dom\";\nimport {CommonService} from \"../../shared/services\";\nimport {IAPIResponseType} from \"../../shared/models/api.model\";\nimport * as yup from \"yup\";\nimport {useSelector} from \"react-redux\";\nimport {IRootReducerState} from \"../../store/reducers\";\n\nexport interface IntakeFormScreenProps {\n\n}\n\nconst ENABLE_FORM_DEBUG_MODE = false;\n\nconst IntakeFormScreen = (props: IntakeFormScreenProps) => {\n\n    const navigate = useNavigate();\n    const {token, currentUser, isUserFromRegister} = useSelector((state: IRootReducerState) => state.account);\n    const [formData, setFormData] = useState<any>({\n        temperature: \"98.6\",\n    });\n    const [isFormDataBeingSubmitted, setIsFormDataBeingSubmitted] = useState<boolean>(false);\n    const [currentStepData, setCurrentStepData] = useState<any>({});\n    const [isPatientIntakeFormLoadingFailed, setIsPatientIntakeFormLoadingFailed] = useState<any>([]);\n    const [isPatientIntakeFormLoaded, setIsPatientIntakeFormLoaded] = useState<any>([]);\n    const [isPatientIntakeFormLoading, setIsPatientIntakeFormLoading] = useState<any>([]);\n    const [stepsData, setStepsData] = useState<any[]>([]);\n    const [currentStepQuestions, setCurrentStepQuestions] = useState<any[]>([])\n    const [isAtLeastOneQuestionAnsweredInCurrentStep, setIsAtLeastOneQuestionAnsweredInCurrentStep] = useState<boolean>(false);\n    const [searchParams] = useSearchParams();\n    const sampleId = searchParams.get('sampleId');\n    const orderId = searchParams.get('orderId');\n\n    const handlePrevious = useCallback(() => {\n        const currentStepIndex = stepsData.length - 1;\n        const prevStepIndex = currentStepIndex - 1;\n        const prevStepData = stepsData[prevStepIndex];\n        setStepsData((prevState) => {\n            return prevState.filter((item, index) => (index !== currentStepIndex));\n        });\n        setCurrentStepData(prevStepData);\n    }, [stepsData]);\n\n    const getTestPanelIntakeForm = useCallback(() => {\n        setIsPatientIntakeFormLoading(true);\n        setIsPatientIntakeFormLoaded(false);\n        setIsPatientIntakeFormLoadingFailed(false);\n        let currentStepFormData: any = [];\n        let payload = {}\n        payload = {...payload, formId: currentUser?.formId,panelId: currentUser?.panelId}\n        if (sampleId) {\n            payload = {...payload, sampleId: sampleId}\n        }\n        if (orderId) {\n            payload = {...payload, orderId: orderId}\n        }\n        if (token) {\n            CommonService._staticData.getTestPanelIntakeForm(token, payload)\n                .then((response: IAPIResponseType<any>) => {\n                    if (response?.data) {\n                        currentStepFormData = response.data;\n                    }\n                    setCurrentStepData(currentStepFormData);\n                    const stepQuestions = currentStepFormData.questions;\n                    let currentStepQuestionsData: any = [];\n                    stepQuestions.forEach((question: any) => {\n                        currentStepQuestionsData.push(question.code)\n                    });\n                    setCurrentStepQuestions(currentStepQuestionsData)\n                    setStepsData([currentStepFormData]);\n                    setIsPatientIntakeFormLoading(false);\n                    setIsPatientIntakeFormLoaded(true);\n                    setIsPatientIntakeFormLoadingFailed(false);\n                })\n                .catch((error: any) => {\n                    setCurrentStepData(currentStepFormData);\n                    setStepsData([]);\n                    setIsPatientIntakeFormLoading(false);\n                    setIsPatientIntakeFormLoaded(false);\n                    setIsPatientIntakeFormLoadingFailed(true);\n                });\n        }\n    }, [token,currentUser,orderId,sampleId]);\n\n    useEffect(() => {\n        getTestPanelIntakeForm();\n    }, [getTestPanelIntakeForm]);\n\n    const submitIntakeFormDataToAPI = useCallback((formData: any) => {\n        const finalPayload: any = {};\n        if (currentStepData) {\n            const currentStepFlatQuestions = CommonService.getFlatQuestionList(currentStepData);\n            const patientIntakeFormQuestionsMapping: any = {};\n            currentStepFlatQuestions.forEach((question: any) => {\n                patientIntakeFormQuestionsMapping[question.code] = question;\n            });\n            Object.keys(formData).forEach((questionName) => {\n                const questionData = patientIntakeFormQuestionsMapping[questionName];\n                switch (questionData?.formControlType) {\n                    case \"TextBox\":\n                    case \"RadioButton\":\n                    case \"RadioButtonGroup\":\n                    case \"TemperatureSlider\":\n                        finalPayload[questionName] = formData[questionName];\n                        break;\n                    case \"SelectDropDown\":\n                        if (questionData?.isMultiSelection) {\n                            finalPayload[questionName] = CommonService.getArrayOfValuesOfOneKeyFromJSON(formData[questionName], \"code\");\n                        } else {\n                            finalPayload[questionName] = formData[questionName]?.code;\n                        }\n                        break;\n                    case \"DatePicker\":\n                        finalPayload[questionName] = CommonService.convertDateFormat(formData[questionName]);\n                        break;\n                    case \"CheckBox\":\n                        finalPayload[questionName] = Object.keys(formData[questionName]).filter(item => formData[questionName][item] === true);\n                        break;\n                    default:\n                        console.log(\"formControl type\", questionData?.formControlType, \"not handled\");\n                }\n            })\n        }\n        // make an API call\n        setIsFormDataBeingSubmitted(true);\n        console.log(\"currentStepData\", currentUser);\n        let payload: any = {\n            stepId: currentStepData.stepId,\n            response: finalPayload,\n            panelId: currentUser?.panelId,\n            sessionId: currentUser.sessionId,\n            formId: currentUser?.formId,\n        }\n        if (sampleId) {\n            payload.sampleId = sampleId\n        }\n        if (orderId) {\n            payload.orderId = orderId\n        }\n    if (token) {\n        CommonService._user.savePatientIntakeForm(token, payload)\n            .then((response: IAPIResponseType<any>) => {\n                setIsAtLeastOneQuestionAnsweredInCurrentStep(false);\n                if (response.data.isTestCompleted) {\n                    if (!isUserFromRegister) {\n                        window.close();\n                    }\n                    navigate(CommonService._routeConfig.TestResultRoute());\n                } else {\n                    const nextStepData = response?.data?.nextStepData;\n                    setStepsData((prevValue) => {\n                        return [...prevValue, nextStepData];\n                    });\n                    setCurrentStepData(nextStepData);\n                    const stepQuestions = nextStepData.questions\n                    let currentStepQuestionsData: any = []\n                    stepQuestions.forEach((question: any) => {\n                        currentStepQuestionsData.push(question.code)\n                    })\n                    setCurrentStepQuestions(currentStepQuestionsData)\n                }\n                setIsFormDataBeingSubmitted(false);\n            })\n            .catch((error: any) => {\n                console.error(\"error\", error);\n                CommonService._alert.showToast('Error saving patient intake form');\n                setIsFormDataBeingSubmitted(false);\n            });\n    }\n}, [navigate, currentStepData, token, currentUser, isUserFromRegister, orderId,sampleId]\n)\n;\n\nconst handleNext = useCallback((values: any) => {\n    setFormData({...formData, ...values});\n    submitIntakeFormDataToAPI(values);\n}, [formData, submitIntakeFormDataToAPI]);\n\nconst renderPatientIntakeForm = useCallback((currentStepData: any, formData: any, handlePrevious: any, handleNext: any, isFormDataBeingSubmitted: any) => {\n    if (currentStepData) {\n        const questionValidationsObject = CommonService.createValidationsObject(currentStepData?.questions);\n        const yepSchema = questionValidationsObject?.reduce(CommonService.createYupSchema, {});\n        const validateSchema = yup.object().shape(yepSchema);\n        const initialIsValid = validateSchema.isValidSync(formData);\n        return <div className=\"intake-form-wrapper\">\n            <IntakeFormLayoutComponent\n                formMainTitle={currentStepData.title}\n                onBackNavigation={currentStepData?.canNavigateBack ? () => {\n                    handlePrevious();\n                } : undefined}\n                toolTipInfo={currentStepData?.toolTipInfo}\n                progressInfo={currentStepData?.progressInfo}\n                posterImagePath={currentStepData?.assetUrl}>\n                <Formik\n                    initialValues={formData}\n                    enableReinitialize={true}\n                    validateOnChange={true}\n                    validateOnBlur={false}\n                    validateOnMount={true}\n                    isInitialValid={initialIsValid}\n                    validationSchema={validateSchema}\n                    onSubmit={\n                        values => {\n                            handleNext(values);\n                        }\n                    }>\n                    {({errors, isValid, values, validateForm}) => {\n                        // eslint-disable-next-line react-hooks/rules-of-hooks\n                        useEffect(() => {\n                            if (currentStepData.proceedButtonText === 'Skip') {\n                                let selectedOptions: any = [];\n                                Object.keys(values).forEach((options) => { // TODO: Will work for skip logic with multi select dropdown only. make logic better to accommodate all other scenarios if any in future.\n                                    if (currentStepQuestions.includes(options)) {\n                                        selectedOptions.push(...values[options])\n                                        if (selectedOptions.length > 0) {\n                                            setIsAtLeastOneQuestionAnsweredInCurrentStep(true);\n                                        } else {\n                                            setIsAtLeastOneQuestionAnsweredInCurrentStep(false);\n                                        }\n                                    }\n                                });\n                            }\n                            validateForm();\n                        }, [values, validateForm]);\n                        return <Form>\n                            {ENABLE_FORM_DEBUG_MODE && <div style={{\n                                position: \"fixed\",\n                                top: \"0\",\n                                left: 0,\n                                height: \"400px\",\n                                width: \"700px\",\n                                boxShadow: \"1px 1px 10px 1px #ddd\",\n                                background: \"#fff\",\n                                overflow: \"auto\"\n                            }}>\n                                <div>\n                                    Errors: <div style={{wordWrap: \"break-word\"}}>\n                                    {JSON.stringify(errors)}\n                                </div>\n                                </div>\n                                <hr/>\n                                <div>\n                                    Values: <div style={{wordWrap: \"break-word\"}}>\n                                    {JSON.stringify(values)}\n                                </div>\n                                </div>\n                            </div>\n                            }\n                            <div className={\"intake-form-body\"}>\n                                {currentStepData.questions?.map((question: any, index: any) => {\n                                    return <div key={question.title + index}>\n                                        {\n                                            question.title && <div className={\"intake-form-title\"}>\n                                                {question.title}\n                                            </div>\n                                        }\n                                        <div\n                                            className={`intake-form-options ${question.autoHeight ? \"auto-height\" : \"\"}`}>\n                                            {\n                                                question.subTitle && <div className={\"intake-form-sub-title\"}>\n                                                    {question.subTitle}\n                                                </div>\n                                            }\n                                            <FormControlParserComponent\n                                                className={\"main-question\"}\n                                                question={question}/>\n                                        </div>\n                                    </div>\n                                })}\n                                <div className=\"intake-form-actions\">\n                                    <ButtonComponent type={\"submit\"} fullWidth={true}\n                                                     isLoading={isFormDataBeingSubmitted}\n                                                     disabled={!isValid || isFormDataBeingSubmitted}\n                                    >\n\n                                        {(currentStepData.proceedButtonText === 'Skip' && isAtLeastOneQuestionAnsweredInCurrentStep) ? 'Next' : currentStepData.proceedButtonText}\n                                    </ButtonComponent><br/>\n\n\n                                </div>\n                            </div>\n                        </Form>\n                    }}\n                </Formik>\n            </IntakeFormLayoutComponent>\n        </div>\n    } else {\n        <></>\n    }\n}, [currentStepQuestions, isAtLeastOneQuestionAnsweredInCurrentStep]);\n\nreturn (\n    <div className={'intake-form-screen screen'}>\n        {\n            isPatientIntakeFormLoading && <LoaderComponent/>\n        }\n        {\n            isPatientIntakeFormLoadingFailed &&\n            <StatusCardComponent type={\"error\"}>\n                Error loading Patient Intake Form {JSON.stringify(\"\")}\n            </StatusCardComponent>\n        }\n        {\n            isPatientIntakeFormLoaded &&\n            renderPatientIntakeForm(currentStepData, formData, handlePrevious, handleNext, isFormDataBeingSubmitted)\n        }\n    </div>\n);\n\n}\n;\n\nexport default IntakeFormScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}